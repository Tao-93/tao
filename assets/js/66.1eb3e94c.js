(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{326:function(n,e,t){"use strict";t.r(e);var p=t(0),s=Object(p.a)({},(function(){var n=this.$createElement;this._self._c;return this._m(0)}),[function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"content"},[t("h3",{attrs:{id:"npm-常用命令及包"}},[n._v("npm 常用命令及包")]),t("ol",[t("li",[t("p",[t("strong",[n._v("安装命令")])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v(" npm install 模块名 -g                    //全局安装           \n npm install 模块名                       //本地安装\n npm install 模块1 模块2 模块3             //一次性安装多个\n npm install 模块名 --save-dev            //安装开发时依赖包\n npm install 模块名 --save                //安装运行时依赖包\n")])])])]),t("li",[t("p",[n._v("帮助")]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("npm init                                 //创建一个package.json文件\nnpm cache clean                          //清除npm的缓存   ---   慎用\nnpm help\nnpm -v\nnpm help json                            //访问package.json的字段文档\nnpm list                                 //查看当前已经安装的模块\nnpm list --depth=0                       //查看当前已安装模块,限制输入的模块层级\n")])])])]),t("li",[t("p",[n._v("查看包各种属性")]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("npm root                                 //查看项目中模块所在的目录\nnpm root -g                              //查看全局安装的模块所在目录\nnpm view 模块名 dependencies              //查看某个包对于各种包的依赖关系\nnpm view 模块名 repository.url            //查看包的源文件地址\nnpm view 模块名 engines                   //查看当前模块依赖的node最低版本号\nnpm view 模块名 version                   //查看到模块版本是该模块再远程仓库的版本号\nnpm list 模块名 version                   //查看当前项目中应用的某个模块的版本号\nnpm view 模块名 versions                  //查看模块的历史版本和当前版本\nnpm view 模块名                           //查看一个模块的所有信息\nnpm help folders                         //查看npm使用的所有文件夹\nnpm rebuild 模块名                        //用于更改包内容后进行重建\nnpm outdated                             //检查包是否已经过时\nnpm bugs 模块名                           //查看某个模块的bugs列表界面\n")])])])]),t("li",[t("p",[n._v("更新/卸载 node模块")]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("npm update 模块名 \nnpm update 模块名 @版本号                  //当然你也可以update 该模块到指定版本\nnpm install 模块名@latest                 //安装到最新版本\nnpm uninstall 模块名                      //卸载 node模块\nnpm prune                                //清除未被使用到的模块\n")])])])])]),t("h3",{attrs:{id:"npm-使用技巧"}},[n._v("npm 使用技巧")]),t("p",[t("strong",[n._v("npm ci")])]),t("p",[t("code",[n._v("npm ci")]),n._v(" 根据 "),t("code",[n._v("package-lock.json")]),n._v(" 安装依赖，保证整个开发团队都使用版本完全一致的依赖。")]),t("p",[t("code",[n._v("npm ci")]),n._v(" 加快 node 模块安装速度。")]),t("p",[n._v("**npm outdated **")]),t("p",[t("code",[n._v("npm outdated")]),n._v("。它会列出还没有升到当前最新版本的项目依赖。红色表示符合指定的语义化版本范围，理论上可以无脑升级（"),t("code",[n._v("npm update")]),n._v(" 会一次性升级所有红色依赖）。黄色表示不符合指定的语义化版本范围，比如大版本升级，升级可能会遇到兼容性问题。")]),t("p",[t("strong",[n._v("npm init -y")])]),t("p",[t("code",[n._v("npm init -y")]),n._v("  可以跳过问题，直接安装")])])}],!1,null,null,null);e.default=s.exports}}]);