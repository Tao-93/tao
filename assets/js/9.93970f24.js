(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{227:function(v,_,t){v.exports=t.p+"assets/img/xss1.e19750ad.jpg"},228:function(v,_,t){v.exports=t.p+"assets/img/csrf.1cf486a0.jpg"},229:function(v,_,t){v.exports=t.p+"assets/img/dns.07adc422.jpg"},274:function(v,_,t){"use strict";t.r(_);var s=[function(){var v=this,_=v.$createElement,s=v._self._c||_;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"前端安全"}},[v._v("前端安全")]),s("p",[v._v("前端安全问题：发生在浏览器，前端应用或者由前端开发工程师来对其进行修复的安全问题。")]),s("h2",{attrs:{id:"xss"}},[v._v("XSS")]),s("p",[v._v("原理：浏览器错误的将攻击者提供的用户输入数据当做JavaScript脚本给执行了，从而可以达到攻击者盗取用户信息或其他侵犯用户安全隐私的目的")]),s("h4",{attrs:{id:"非持久性xss"}},[v._v("非持久性XSS")]),s("p",[v._v("持久型 XSS 漏洞，也叫反射型 XSS 漏洞，一般是通过给别人发送带有恶意脚本代码参数的 URL，当 URL 地址被打开时，特有的恶意代码参数被 HTML 解析、执行。")]),s("p",[s("img",{attrs:{src:t(227),alt:""}})]),s("p",[s("strong",[v._v("特征")])]),s("ul",[s("li",[v._v("即时性，不经过服务器存储，直接通过 HTTP 的 GET 和 POST 请求就能完成一次攻击，拿到用户隐私数据。")]),s("li",[v._v("攻击者需要诱骗点击")]),s("li",[v._v("反馈率低，所以较难发现和响应修复")]),s("li",[v._v("盗取用户敏感保密信息")])]),s("p",[s("strong",[v._v("防范")])]),s("ul",[s("li",[v._v("Web 页面渲染的所有内容或者渲染的数据都必须来自于服务端。")]),s("li",[v._v("尽量不要从 URL，"),s("code",[v._v("document.referrer")]),v._v("，"),s("code",[v._v("document.forms")]),v._v(" 等这种 DOM API 中获取数据直接渲染。")]),s("li",[v._v("尽量不要使用 "),s("code",[v._v("eval")]),v._v(", "),s("code",[v._v("new Function()")]),v._v("，"),s("code",[v._v("document.write()")]),v._v("，"),s("code",[v._v("document.writeln()")]),v._v("，"),s("code",[v._v("window.setInterval()")]),v._v("，"),s("code",[v._v("window.setTimeout()")]),v._v("，"),s("code",[v._v("innerHTML")]),v._v("，"),s("code",[v._v("document.creteElement()")]),v._v(" 等可执行字符串的方法。")]),s("li",[v._v("如果做不到以上几点，也必须对涉及 DOM 渲染的方法传入的字符串参数做 escape 转义。")]),s("li",[v._v("前端渲染的时候对任何的字段都需要做 escape 转义编码。")])]),s("h4",{attrs:{id:"持久性xss"}},[v._v("持久性XSS")]),s("p",[v._v("久型 XSS 漏洞，也被称为存储型 XSS 漏洞，一般存在于 Form 表单提交等交互功能，如发帖留言，提交文本信息等，黑客利用的 XSS 漏洞，将内容经正常功能提交进入数据库持久保存，当前端页面获得后端从数据库中读出的注入代码时，恰好将其渲染执行。")]),s("p",[s("strong",[v._v("满足条件")])]),s("ul",[s("li",[v._v("POST 请求提交表单后端没做转义直接入库。")]),s("li",[v._v("后端从数据库中取出数据没做转义直接输出给前端。")]),s("li",[v._v("前端拿到后端数据没做转义直接渲染成 DOM。")])]),s("p",[s("strong",[v._v("特征")])]),s("ul",[s("li",[v._v("持久性，植入在数据库中")]),s("li",[v._v("危害面广，甚至可以让用户机器变成 DDoS 攻击的肉鸡。")]),s("li",[v._v("盗取用户敏感私密信息")])]),s("p",[s("strong",[v._v("防范")]),v._v(" (前后端)")]),s("ul",[s("li",[v._v("后端在入库前将所有的字段统一进行转义处理。")]),s("li",[v._v("后端在输出给前端数据统一进行转义处理。")]),s("li",[v._v("前端在渲染页面 DOM 的时候应该--任何字段都需要做转义处理。")])]),s("h4",{attrs:{id:"基于字符串的xss"}},[v._v("基于字符串的XSS")]),s("p",[v._v("比如「基于字符集的 XSS 攻击」就是绕过这些转义处理的一种攻击方式，比如有些 Web 页面字符集不固定，用户输入非期望字符集的字符，有时会绕过转义过滤规则。")]),s("p",[s("strong",[v._v("防范")])]),s("ul",[s("li",[v._v("指定 "),s("code",[v._v('<meta charset="utf-8">')])]),s("li",[v._v("XML 中不仅要指定字符集为 utf-8，而且标签要闭合")])]),s("h2",{attrs:{id:"csrf"}},[v._v("CSRF")]),s("p",[v._v("CSRF（Cross-Site Request Forgery），名称：跨站请求伪造攻击")]),s("p",[v._v("攻击者可以盗用你的登陆信息，以你的身份模拟发送各种请求。")]),s("p",[s("img",{attrs:{src:t(228),alt:""}})]),s("p",[s("strong",[v._v("满足条件")])]),s("ul",[s("li",[v._v("用户已经登录了站点 A，并在本地记录了 cookie")]),s("li",[v._v("在用户没有登出站点 A 的情况下（也就是 cookie 生效的情况下），访问了恶意攻击者提供的引诱危险站点 B (B 站点要求访问站点A)。")]),s("li",[v._v("站点 A 没有做任何 CSRF 防御")])]),s("p",[s("strong",[v._v("防范")])]),s("ul",[s("li",[v._v("正确使用 GET，POST 请求和 cookie")]),s("li",[v._v("在非 GET 请求中增加 token")])]),s("h2",{attrs:{id:"sql注入"}},[v._v("SQL注入")]),s("p",[v._v("SQL 注入漏洞（SQL Injection）是 一种安全漏洞。可以用它从数据库获取敏感信息，或者利用数据库的特性执行添加用户，导出文件等一系列恶意操作，甚至有可能获取数据库乃至系统用户最高权限")]),s("p",[s("strong",[v._v("原因")])]),s("p",[v._v("程序没有有效的转义过滤用户的输入，使攻击者成功的向服务器提交恶意的 SQL 查询代码，程序在接收后错误的将攻击者的输入作为查询语句的一部分执行，导致原始的查询逻辑被改变，额外的执行了攻击者精心构造的恶意代码。")]),s("p",[s("strong",[v._v("防范")])]),s("ul",[s("li",[s("strong",[v._v("严格限制Web应用的数据库的操作权限")]),v._v("，给此用户提供仅仅能够满足其工作的最低权限，从而最大限度的减少注入攻击对数据库的危害")]),s("li",[s("strong",[v._v("后端代码检查输入的数据是否符合预期")]),v._v("，严格限制变量的类型，例如使用正则表达式进行一些匹配处理。")]),s("li",[s("strong",[v._v("对进入数据库的特殊字符（'，\"，\\，<，>，&，*，; 等）进行转义处理")]),v._v("，或编码转换。基本上所有的后端语言都有对字符串进行转义处理的方法，比如 lodash 的 "),s("code",[v._v("lodash._escapehtmlchar")]),v._v("库。")]),s("li",[s("strong",[v._v("所有的查询语句建议使用数据库提供的参数化查询接口")]),v._v("，参数化的语句使用参数而不是将用户输入变量嵌入到 SQL 语句中，即不要直接拼接 SQL 语句。例如 Node.js 中的 mysqljs 库的 "),s("code",[v._v("query")]),v._v(" 方法中的 "),s("code",[v._v("?")]),v._v(" 占位参数。")]),s("li",[s("strong",[v._v("在应用发布之前建议使用专业的 SQL 注入检测工具进行检测")]),v._v("，以及时修补被发现的 SQL 注入漏洞。网上有很多这方面的开源工具，例如 sqlmap、SQLninja 等。")]),s("li",[s("strong",[v._v("避免网站打印出 SQL 错误信息")]),v._v("，比如类型错误、字段不匹配等，把代码里的 SQL 语句暴露出来，以防止攻击者利用这些错误信息进行 SQL 注入。")]),s("li",[s("strong",[v._v("不要过于细化返回的错误信息")]),v._v("，如果目的是方便调试，就去使用后端日志，不要在接口上过多的暴露出错信息，毕竟真正的用户不关心太多的技术细节，只要话术合理就行。")])]),s("h2",{attrs:{id:"命令行注入"}},[v._v("命令行注入")]),s("p",[v._v("攻击者能够通过 HTTP 请求直接侵入主机，执行攻击者预设的 shell 命令")]),s("p",[s("strong",[v._v("防范")])]),s("ul",[s("li",[v._v("后端对前端提交内容对其进行规则限制（比如正则表达式）。")]),s("li",[v._v("在调用系统命令前对所有传入参数进行命令行参数转义过滤。")]),s("li",[v._v("不要直接拼接命令语句，借助一些工具做拼接、转义预处理，例如 Node.js 的 "),s("code",[v._v("shell-escape")]),v._v(" npm 包。")])]),s("h2",{attrs:{id:"ddos攻击"}},[v._v("DDoS攻击")]),s("p",[v._v("DDoS 又叫分布式拒绝服务，全称 Distributed Denial of Service，其原理就是利用大量的请求造成资源过载，导致服务不可用。")]),s("p",[v._v("DDos 攻击从层次上可分为网络层攻击与应用层攻击，从攻击手法上可分为快型流量攻击与慢型流量攻击，但其原理都是造成资源过载，导致服务不可用。")]),s("h2",{attrs:{id:"流量劫持"}},[v._v("流量劫持")]),s("p",[v._v("流量劫持基本分两种："),s("code",[v._v("DNS 劫持")]),v._v(" 和 "),s("code",[v._v("HTTP 劫持")]),v._v("，目的都是一样的，就是当用户访问 aa.com 的时候，给你展示的并不是或者不完全是 aa.com 提供的 “内容”。")]),s("h2",{attrs:{id:"dns劫持"}},[v._v("DNS劫持")]),s("p",[v._v("DNS 劫持，也叫域名劫持，")]),s("p",[v._v("DNS 的作用是把网络地址域名对应到真实的计算机能够识别的 IP 地址，以便计算机能够进一步通信，传递网址和内容等。如果当用户通过某一个域名访问一个站点的时候，被篡改的 DNS 服务器返回的是一个恶意的钓鱼站点的 IP，用户就被劫持到了恶意钓鱼站点，然后继而会被钓鱼输入各种账号密码信息，泄漏隐私。")]),s("p",[s("img",{attrs:{src:t(229),alt:""}})]),s("p",[s("strong",[v._v("满足条件")])]),s("ul",[s("li",[v._v("取证很重要，时间、地点、IP、拨号账户、截屏、URL 地址等一定要有。")]),s("li",[v._v("可以跟劫持区域的电信运营商进行投诉反馈。")]),s("li",[v._v("如果投诉反馈无效，直接去工信部投诉，一般来说会加白你的域名。")])]),s("h2",{attrs:{id:"http劫持"}},[v._v("HTTP劫持")]),s("p",[v._v("HTTP 劫持主要是当用户访问某个站点的时候会经过运营商网络，而不法运营商和黑产勾结能够截获 HTTP 请求返回内容，并且能够篡改内容，然后再返回给用户，从而实现劫持页面，轻则插入小广告，重则直接篡改成钓鱼网站页面骗用户隐私。")]),s("p",[v._v("能够实施流量劫持的根本原因，是 HTTP 协议没有办法对通信对方的身份进行校验以及对数据完整性进行校验。如果能解决这个问题，则流量劫持将无法轻易发生。所以防止 HTTP 劫持的方法只有将内容加密，让劫持者无法破解篡改，这样就可以防止 HTTP 劫持了。")]),s("p",[s("strong",[v._v("防范")])]),s("p",[v._v("HTTPS 协议就是一种基于 SSL 协议的安全加密网络应用层协议，可以很好的防止 HTTP 劫持。")]),s("h2",{attrs:{id:"服务器漏洞"}},[v._v("服务器漏洞")]),s("h2",{attrs:{id:"越权操作漏洞"}},[v._v("越权操作漏洞")]),s("h2",{attrs:{id:"目录遍历漏洞"}},[v._v("目录遍历漏洞")]),s("h2",{attrs:{id:"物理路径泄漏"}},[v._v("物理路径泄漏")]),s("h2",{attrs:{id:"源码暴露漏洞"}},[v._v("源码暴露漏洞")])])}],e=t(0),i=Object(e.a)({},(function(){var v=this.$createElement;this._self._c;return this._m(0)}),s,!1,null,null,null);_.default=i.exports}}]);