(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{284:function(e,t,n){"use strict";n.r(t);var a=n(0),r=Object(a.a)({},(function(){var e=this.$createElement;this._self._c;return this._m(0)}),[function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"content"},[t("h1",{attrs:{id:"template理解"}},[this._v("template理解")]),t("p",[this._v("就是先转化成AST树，再得到的render函数返回VNode（Vue的虚拟DOM节点）")]),t("p",[this._v("详情步骤：")]),t("p",[this._v("首先，通过compile编译器把template编译成AST语法树（abstract syntax tree 即 源代码的抽象语法结构的树状表现形式），compile是createCompiler的返回值，createCompiler是用以创建编译器的。另外compile还负责合并option。")]),t("p",[this._v("然后，AST会经过generate（将AST语法树转化成render funtion字符串的过程）得到render函数，render的返回值是VNode，VNode是Vue的虚拟DOM节点，里面有（标签名、子节点、文本等等）")]),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('<div id="app">\n    <h1>我是直接写在构造器里的模板1</h1>\n</div>\n \n<template id="demo3">\n    <h1 style="color:red">我是选项模板3</h1>\n</template>\n \n<script type="x-template" id="demo4">\n    <h1 style="color:red">我是script标签模板4</h1>\n<\/script>\n \n<script>\n    var vm=new Vue({\n        el:"#app",\n        data:{\n            message:1\n        },\n \n        //第2种模板 写在构造器里\n        //template:`<h1 style="color:red">我是选项模板2</h1>`\n \n        //第3种模板 写在<template>标签里\n        //template:\'#demo3\'\n \n        //第4种模板 写在<script type="x-template">标签里\n        template:\'#demo4\'\n    })\n<\/script>\n')])])])])}],!1,null,null,null);t.default=r.exports}}]);