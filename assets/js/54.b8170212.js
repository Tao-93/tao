(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{310:function(r,a,n){"use strict";n.r(a);var e=n(0),s=Object(e.a)({},(function(){var r=this.$createElement;this._self._c;return this._m(0)}),[function(){var r=this,a=r.$createElement,n=r._self._c||a;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"数组"}},[r._v("数组")]),n("p",[n("strong",[r._v("创建方式---构造函数")])]),n("ul",[n("li",[n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v('var arr1 = new Array(); //创建一个空数组\nvar arr2 = new Array(20); // 创建一个包含20项的数组\nvar arr3 = new Array("a","b","c"); // 创建一个包含3个字符串的数组\n')])])])])]),n("p",[n("strong",[r._v("创建方式---字面量")])]),n("ul",[n("li",[n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v('var arr4 = []; //创建一个空数组\nvar arr5 = [20]; // 创建一个包含1项的数组\nvar arr6 = ["a","b","c"]; // 创建一个包含3个字符串的数组\n')])])])])]),n("p",[r._v("###基本方法")]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v("join()\npush()和pop()\nshift() 和 unshift()\nsort()\nreverse()\nconcat()\nslice()\nsplice()\n\nindexOf()和 lastIndexOf()   （ES5新增）\nforEach()                   （ES5新增）\nmap()                       （ES5新增）\nfilter()                    （ES5新增）\nevery()                     （ES5新增）\nsome()                      （ES5新增）\nreduce()和 reduceRight()    （ES5新增）\n\nfind()                       （ES6新增）\nfindIndex()                  （ES6新增）\nincludes()                   （ES6新增）\nkeys()                       （ES6新增）\nvalues()                     （ES6新增）\nentries()                    （ES6新增）\nfill()                       （ES6新增）\nArray.of()                   （ES6新增）\ncopyWithin()                 （ES6新增）\nArray.from()                 （ES6新增）\n")])])]),n("h3",{attrs:{id:"基本功能"}},[r._v("基本功能")]),n("ul",[n("li",[n("p",[n("strong",[r._v("join()")]),r._v("----数组的元素组起一个字符串，以separator为分隔符，省略的话则用默认用逗号为分隔符，该方法只接收一个参数：即分隔符。")]),n("ul",[n("li",[n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v('var arr = [1,2,3];\nconsole.log(arr.join()); // 1,2,3\nconsole.log(arr.join("-")); // 1-2-3\nconsole.log(arr); // [1, 2, 3]（原数组不变）\n')])])])]),n("li",[n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v('oin()方法可以实现重复字符串\nfunction repeatString(str, n) {\n\treturn new Array(n + 1).join(str);\n}\nconsole.log(repeatString("abc", 3)); // abcabcabc\nconsole.log(repeatString("Hi", 5)); // HiHiHiHiHi\n')])])])])])]),n("li",[n("p",[n("strong",[r._v("push()和pop()")])]),n("p",[r._v("push()：可以接收任意数量的参数，把它们逐个添加到数组末尾，并返回修改后数组的长度。")]),n("p",[r._v("pop()：数组末尾移除最后一项，减少数组的 length 值，然后返回移除的项。")]),n("ul",[n("li",[n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v('var arr = ["Lily","lucy","Tom"];\nvar count = arr.push("Jack","Sean");\nconsole.log(count); // 5\nconsole.log(arr); // ["Lily", "lucy", "Tom", "Jack", "Sean"]\n\nvar item = arr.pop();\nconsole.log(item); // Sean\nconsole.log(arr); // ["Lily", "lucy", "Tom", "Jack"]\n')])])])])])]),n("li",[n("p",[n("strong",[r._v("shift() 和 unshift()")])]),n("p",[r._v("shift()：删除原数组第一项，并返回删除元素的值；如果数组为空则返回undefined 。\nunshift：将参数添加到原数组开头，并返回数组的长度 。")])]),n("li",[n("p",[n("strong",[r._v("sort()")]),r._v(" ---按升序排列数组项——即最小的值位于最前面，最大的值排在最后面。")]),n("p",[r._v("在排序时，sort()方法会调用每个数组项的 toString()转型方法，然后比较得到的字符串，以确定如何排序。即使数组中的每一项都是数值， sort()方法比较的也是字符串，")]),n("ul",[n("li",[n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v('var arr1 = ["a", "d", "c", "b"];\nconsole.log(arr1.sort()); // ["a", "b", "c", "d"]\narr2 = [13, 24, 51, 3];\nconsole.log(arr2.sort()); // [13, 24, 3, 51]\nconsole.log(arr2); // [13, 24, 3, 51](元数组被改变)\n')])])])]),n("li",[n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v(" function sortNum(a,b) {\n  return a - b; \n //升序，如降序，把“a - b”该成“b - a”\n   }\n var myarr = new Array(80,16,50,6,100,1);\n console.log( myarr.sort(sortNum));   //1,6,16,50,80,100\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v("\n")])])])])])]),n("li",[n("p",[n("strong",[r._v("reverse()")]),r._v(" ---反转数组项的顺序。")]),n("ul",[n("li",[n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v("var arr = [13, 24, 51, 3];\nconsole.log(arr.reverse()); //[3, 51, 24, 13]\nconsole.log(arr); //[3, 51, 24, 13](原数组改变)\n")])])])])])]),n("li",[n("p",[n("strong",[r._v("concat()")]),r._v(" ---将参数添加到原数组中。")]),n("ul",[n("li",[n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v("var arr = [1,3,5,7];\nvar arrCopy = arr.concat(9,[11,13]);\nconsole.log(arrCopy); //[1, 3, 5, 7, 9, 11, 13]\nconsole.log(arr); // [1, 3, 5, 7](原数组未被修改)\n\nvar arrCopy2 = arr.concat([9,[11,13]]);\nconsole.log(arrCopy2); //[1, 3, 5, 7, 9, Array[2]]\nconsole.log(arrCopy2[5]); //[11, 13]\n")])])])])])]),n("li",[n("p",[n("strong",[r._v("slice()")]),r._v(" ---返回从原数组中指定开始下标到结束下标之间的项组成的新数组。")]),n("p",[r._v("slice()方法可以接受一或两个参数，即要返回项的起始和结束位置。在只有一个参数的情况下， slice()方法返回从该参数指定位置开始到当前数组末尾的所有项。如果有两个参数，该方法返回起始和结束位置之间的项——但不包括结束位置的项。")]),n("ul",[n("li",[n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v("var arr = [1,3,5,7,9,11];\nvar arrCopy = arr.slice(1);\nvar arrCopy2 = arr.slice(1,4);\nvar arrCopy3 = arr.slice(1,-2);\nvar arrCopy4 = arr.slice(-4,-1);\n\nconsole.log(arr); //[1, 3, 5, 7, 9, 11](原数组没变)\nconsole.log(arrCopy); //[3, 5, 7, 9, 11]\nconsole.log(arrCopy2); //[3, 5, 7]\nconsole.log(arrCopy3); //[3, 5, 7]\nconsole.log(arrCopy4); //[5, 7, 9]\n")])])])])])]),n("li",[n("p",[r._v("splice()---删除，插入和替换")]),n("p",[n("strong",[r._v("删除")]),r._v("：可以删除任意数量的项，只需指定 2 个参数：要删除的第一项的位置和要删除的项数。例如， splice(0,2)会删除数组中的前两项。")]),n("p",[n("strong",[r._v("插入")]),r._v("：可以向指定位置插入任意数量的项，只需提供 3 个参数：起始位置、 0（要删除的项数）和要插入的项。例如，splice(2,0,4,6)会从当前数组的位置 2 开始插入4和6。"),n("br"),n("strong",[r._v("替换")]),r._v("：可以向指定位置插入任意数量的项，且同时删除任意数量的项，只需指定 3 个参数：起始位置、要删除的项数和要插入的任意数量的项。插入的项数不必与删除的项数相等。例如，splice (2,1,4,6)会删除当前数组位置 2 的项，然后再从位置 2 开始插入4和6。")]),n("p",[r._v("splice()方法始终都会返回一个数组，该数组中包含从原始数组中删除的项，如果没有删除任何项，则返回一个空数组。")]),n("ul",[n("li",[n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v("var arr = [1,3,5,7,9,11];\nvar arrRemoved = arr.splice(0,2);\nconsole.log(arr); //[5, 7, 9, 11]\nconsole.log(arrRemoved); //[1, 3]\n\nvar arrRemoved2 = arr.splice(2,0,4,6);\nconsole.log(arr); // [5, 7, 4, 6, 9, 11]\nconsole.log(arrRemoved2); // []\n\nvar arrRemoved3 = arr.splice(1,1,2,4);\nconsole.log(arr); // [5, 2, 4, 4, 6, 9, 11]\nconsole.log(arrRemoved3); //[7]\n")])])])])])]),n("li",[n("p",[n("strong",[r._v("indexOf()和 lastIndexOf()")])]),n("p",[r._v("indexOf()：接收两个参数：要查找的项和（可选的）表示查找起点位置的索引。其中， 从数组的开头（位置 0）开始向后查找。\nlastIndexOf：接收两个参数：要查找的项和（可选的）表示查找起点位置的索引。其中， 从数组的末尾开始向前查找。")]),n("p",[r._v("这两个方法都返回要查找的项在数组中的位置，或者在没找到的情况下返回1。在比较第一个参数与数组中的每一项时，会使用全等操作符。")]),n("ul",[n("li",[n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v('var arr = [1,3,5,7,7,5,3,1];\nconsole.log(arr.indexOf(5)); //2\nconsole.log(arr.lastIndexOf(5)); //5\nconsole.log(arr.indexOf(5,2)); //2\nconsole.log(arr.lastIndexOf(5,4)); //2\nconsole.log(arr.indexOf("5")); //-1\n')])])])])])]),n("li",[n("p",[n("strong",[r._v("forEach()")]),r._v(" ---对数组进行遍历"),n("strong",[r._v("循环")]),r._v("，对数组中的每一项运行给定函数。这个方法没有返回值。参数都是function类型，默认有传参，参数分别为：遍历的数组内容；第对应的数组索引，数组本身。")]),n("ul",[n("li",[n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v("var arr = [1, 2, 3, 4, 5];\narr.forEach(function(x, index, a){\n\tconsole.log(x + '|' + index + '|' + (a === arr));\n});\n// 输出为：\n// 1|0|true\n// 2|1|true\n// 3|2|true\n// 4|3|true\n// 5|4|true\n")])])])])])]),n("li",[n("p",[n("strong",[r._v("map()")]),r._v(" ---指“"),n("strong",[r._v("映射")]),r._v("”，对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。")]),n("ul",[n("li",[n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v("var arr = [1, 2, 3, 4, 5];\nvar arr2 = arr.map(function(item){\nreturn item*item;\n});\nconsole.log(arr2); //[1, 4, 9, 16, 25]\n")])])])])])]),n("li",[n("p",[n("strong",[r._v("filter()")]),r._v(" ---“"),n("strong",[r._v("过滤")]),r._v("”功能，数组中的每一项运行给定函数，返回满足过滤条件组成的数组。")]),n("ul",[n("li",[n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v("var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar arr2 = arr.filter(function(x, index) {\n\treturn index % 3 === 0 || x >= 8;\n}); \nconsole.log(arr2); //[1, 4, 7, 8, 9, 10]\n")])])])])])]),n("li",[n("p",[n("strong",[r._v("every()")]),r._v(" ---判断数组中每一项都是否满足条件，只有所有项都满足条件，才会返回true。")]),n("ul",[n("li",[n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v("var arr = [1, 2, 3, 4, 5];\nvar arr2 = arr.every(function(x) {\n\treturn x < 10;\n}); \nconsole.log(arr2); //true\n\nvar arr3 = arr.every(function(x) {\n\treturn x < 3;\n}); \nconsole.log(arr3); // false\n")])])])])])]),n("li",[n("p",[n("strong",[r._v("some()")]),r._v(" ---判断数组中是否存在满足条件的项，只要有一项满足条件，就会返回true。")]),n("ul",[n("li",[n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v("var arr = [1, 2, 3, 4, 5];\nvar arr2 = arr.some(function(x) {\n\treturn x < 3;\n}); \nconsole.log(arr2); //true\n\nvar arr3 = arr.some(function(x) {\n\treturn x < 1;\n}); \nconsole.log(arr3); // false\n")])])])])])]),n("li",[n("p",[n("strong",[r._v("reduce()和 reduceRight()")])]),n("p",[r._v("这两个方法都会实现"),n("strong",[r._v("迭代")]),r._v("数组的所有项，然后构建一个最终返回的值。")]),n("p",[r._v("reduce()方法从数组的第一项开始，逐个遍历到最后。而 reduceRight()则从数组的最后一项开始，向前遍历到第一项。")]),n("p",[r._v("这两个方法都接收两个参数：一个在每一项上调用的函数和（可选的）作为归并基础的初始值。")]),n("p",[r._v("传给 reduce()和 reduceRight()的函数接收 4 个参数：前一个值、当前值、项的索引和数组对象。这个函数返回的任何值都会作为第一个参数自动传给下一项。第一次迭代发生在数组的第二项上，因此第一个参数是数组的第一项，第二个参数就是数组的第二项。")]),n("ul",[n("li",[n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v("var values = [1,2,3,4,5];\nvar sum = values.reduceRight(function(prev, cur, index, array){\n\treturn prev + cur;\n},10);\nconsole.log(sum); //25\n")])])])])])]),n("li",[n("p",[n("strong",[r._v("find()")]),r._v("---的参数为回调函数，回调函数可以接收3个参数，值x、索引i、数组arr，回调函数默认返回值x。")]),n("ul",[n("li",[n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v('let arr=[1,2,234,\'sdf\',-2];\narr.find(function(x){\n    return x<=2;\n})//结果：1，返回第一个符合条件的x值\n\narr.find(function(x,i,arr){\n    if(x<2){console.log(x,i,arr)}\n})//结果：1 0 [1, 2, 234, "sdf", -2]，-2 4 [1, 2, 234, "sdf", -2]\n')])])])])])]),n("li",[n("p",[n("strong",[r._v("findIndex()")]),r._v("---和find差不多，不过默认返回的是索引。")]),n("ul",[n("li",[n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v('let arr=[1,2,234,\'sdf\',-2];\narr.findIndex(function(x){\n    return x<=2;\n})//结果：0，返回第一个符合条件的x值的索引\n\n\narr.findIndex(function(x,i,arr){\n    if(x<2){console.log(x,i,arr)}\n})//结果：1 0 [1, 2, 234, "sdf", -2]，-2 4 [1, 2, 234, "sdf", -2]\n')])])])])])]),n("li",[n("p",[n("strong",[r._v("includes()")]),r._v("---接收2参数，查询的项以及查询起始位置。")]),n("ul",[n("li",[n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v("let arr=[1,2,234,'sdf',-2];\narr.includes(2);// 结果true，返回布尔值\narr.includes(20);// 结果：false，返回布尔值\narr.includes(2,3)//结果：false，返回布尔值\n")])])])])])]),n("li",[n("p",[n("strong",[r._v("keys()")]),r._v("---对数组索引的遍历")]),n("ul",[n("li",[n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v("let arr=[1,2,234,'sdf',-2];\nfor(let a of arr.keys()){\n    console.log(a)\n}//结果：0,1,2,3,4  遍历了数组arr的索引\n")])])])])])]),n("li",[n("p",[n("strong",[r._v("values()")]),r._v("---对数组项的遍历")]),n("ul",[n("li",[n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v("let arr=[1,2,234,'sdf',-2];\nfor(let a of arr.values()){\n    console.log(a)\n}//结果：1,2,234,sdf,-2 遍历了数组arr的值\n")])])])])])]),n("li",[n("p",[n("strong",[r._v("entries()")]),r._v("---对数组键值对的遍历")]),n("ul",[n("li",[n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v("let arr=['w','b'];\nfor(let a of arr.entries()){\n    console.log(a)\n}//结果：[0,w],[1,b]\n\nfor(let [i,v] of arr.entries()){\n    console.log(i,v)\n}//结果：0 w,1 b\n")])])])])])]),n("li",[n("p",[n("strong",[r._v("fill()")]),r._v("---方法改变原数组，当第三个参数大于数组长度时候，以最后一位为结束位置。")]),n("ul",[n("li",[n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v("let arr=['w','b'];\narr.fill('i')//结果：['i','i']，改变原数组\narr.fill('o',1)//结果：['i','o']改变原数组,第二个参数表示填充起始位置\nnew Array(3).fill('k').fill('r',1,2)//结果：['k','r','k']，第三个数组表示填充的结束位置\n")])])])])])]),n("li",[n("p",[n("strong",[r._v("Array.of()")]),r._v(" ---永远返回一个数组，参数不分类型，只分数量，数量为0返回空数组。")]),n("ul",[n("li",[n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v("Array.of('w','i','r')//[\"w\", \"i\", \"r\"]返回数组\nArray.of(['w','o'])//[['w','o']]返回嵌套数组\nArray.of(undefined)//[undefined]依然返回数组\nArray.of()//[]返回一个空数组\n")])])])])])]),n("li",[n("p",[n("strong",[r._v("copyWithin()")]),r._v("---接收三个参数，被替换数据的开始处、替换块的开始处、替换块的结束处(不包括);copyWithin(s,m,n).")]),n("ul",[n("li",[n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v('["w", "i", "r"].copyWithin(0)//此时数组不变\n["w", "i", "r"].copyWithin(1)//["w", "w", "i"],数组从位置1开始被原数组覆盖，只有1之前的项0保持不变\n["w", "i", "r","b"].copyWithin(1,2)//["w", "r", "b", "b"],索引2到最后的r,b两项分别替换到原数组1开始的各项，当数量不够，变终止\n["w", "i", "r",\'b\'].copyWithin(1,2,3)//["w", "r", "r", "b"]，强第1项的i替换为第2项的r\n')])])])])])]),n("li",[n("p",[n("strong",[r._v("Array.from()")]),r._v(" ---可以把带有lenght属性类似数组的对象转换为数组，也可以把字符串等可以遍历的对象转换为数组，它接收2个参数，转换对象与回调函数")]),n("ul",[n("li",[n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v("Array.from({'0':'w','1':'b',length:2})//[\"w\", \"b\"],返回数组的长度取决于对象中的length，故此项必须有！\nArray.from({'0':'w','1':'b',length:4})//[\"w\", \"b\", undefined, undefined],数组后2项没有属性去赋值，故undefined\nArray.from({'0':'w','1':'b',length:1})//[\"w\"],length小于key的数目，按序添加数组\n\n//////////////////////////////\nlet divs=document.getElementsByTagName('div');\nArray.from(divs)//返回div元素数组\nArray.from('wbiokr')//[\"w\", \"b\", \"i\", \"o\", \"k\", \"r\"]\nArray.from([1,2,3],function(x){\n    return x+1\n})//[2, 3, 4],第二个参数为回调函数\n")])])])])])])]),n("p",[r._v("Now, let's try it 👉")])])}],!1,null,null,null);a.default=s.exports}}]);