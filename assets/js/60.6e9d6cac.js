(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{319:function(t,e,i){"use strict";i.r(e);var s=i(0),l=Object(s.a)({},(function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("div",{staticClass:"content"},[i("h1",{attrs:{id:"模块"}},[t._v("模块")]),i("p",[t._v("模块化能隐藏私有的属性和方法，只暴露出公共接口。")]),i("h3",{attrs:{id:"commonjs规范"}},[t._v("CommonJS规范")]),i("p",[t._v("Node.js的模块系统就采用CommonJS规范。CommonJS标准规定：")]),t._m(0),t._m(1),t._m(2),t._m(3),t._m(4),i("h3",{attrs:{id:"常用模块"}},[t._v("常用模块")]),i("ul",[t._m(5),t._m(6),t._m(7),t._m(8),t._m(9),t._m(10),i("li",[t._m(11),i("ul",[i("li",[t._v("[fs.createReadStream(path"),i("a",{attrs:{href:"http://nodejs.cn/api/fs.html#fs_fs_createreadstream_path_options",target:"_blank",rel:"noopener noreferrer"}},[t._v(", options])"),i("OutboundLink")],1)]),i("li",[t._v("[fs.createWriteStream(path[, options])")]),t._m(12)])])]),i("p",[t._v("Now, let's try it 👉")])])}),[function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("一个单独的文件就是一个模块")]),e("li",[this._v("模块内将需要对外暴露的变量放到exports对象里，可以是任意对象，函数，数组等，未放到exports对象里的都是私有的")]),e("li",[this._v("用require方法加载模块，即读取模块文件获得exports对象")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("注意")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("> 在Node.js中，模块对外暴露接口时，实际上就是通过module.exports来实现的。\n>\n> exports只是对module.exports的一个引用。当替换默认对象来暴露接口时，不能使用exports。 \n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("模块属性")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("module.id: 模块的唯一标识")]),e("li",[this._v("module.loaded：标记模块是否加载")]),e("li",[this._v("module.parent: 引用模块的模块")])])},function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("li",[i("p",[i("strong",[t._v("path---处理文件与目录的路径")])]),i("ul",[i("li",[t._v("path.join")]),i("li",[t._v("path.resolve")]),i("li",[t._v("path.parse")]),i("li",[t._v("path.format")]),i("li",[t._v("path.basename")]),i("li",[t._v("path.extname")]),i("li",[t._v("path.dirname")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[e("strong",[this._v("url---URL格式化和反格式化，用于URL解析，处理")])]),e("ul",[e("li",[this._v("url.path")]),e("li",[this._v("url.resolve")]),e("li",[this._v("url.format")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[e("strong",[this._v("query string---解析和格式化URL中？后面的参数（查询字符串）")])]),e("ul",[e("li",[this._v("querystring.escape(str)")]),e("li",[this._v("querystring.parse(str[, sep[, eq[, options]]])")]),e("li",[this._v("querystring.stringify(obj[, sep[, eq[, options]]])")]),e("li",[this._v("querystring.unescape(str)")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[e("strong",[this._v("http--网络模块，不提供路由处理，cookie，缓存等调用。主要实现后端web服务器")])]),e("ul",[e("li",[this._v("http.createServer([options][, requestListener])")]),e("li",[this._v("http.get(options[, callback])")]),e("li",[this._v("http.request(options[, callback])")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[e("strong",[this._v("events--事件模块")])]),e("ul",[e("li",[this._v("EventEmitter")]),e("li",[this._v("emitter.on(eventName, listener)")]),e("li",[this._v("emitter.off(eventName, listener)")]),e("li",[this._v("emitter.once(eventName, listener)")])])])},function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("li",[i("p",[i("strong",[t._v("file system--文件操作，读写目录，读写文件")])]),i("ul",[i("li",[i("strong",[t._v("通用")]),i("ul",[i("li",[t._v("fs.stat()")]),i("li",[t._v("fs.rename(oldPath, newPath, callback)")])])]),i("li",[i("strong",[t._v("文件操作")]),i("ul",[i("li",[t._v("fs.mkdir(path[, mode], callback)")]),i("li",[t._v("fs.readdir(path[, options], callback)")]),i("li",[t._v("fs.rmdir(path, callback)")])])]),i("li",[i("strong",[t._v("文件操作")]),i("ul",[i("li",[t._v("fs.writeFile(file, data[, options], callback)")]),i("li",[t._v("fs.readFile(path[, options], callback)")]),i("li",[t._v("fs.unlink(path, callback)")]),i("li",[t._v("fs.appendFile")]),i("li",[t._v("([(path, data[, options], callback)")]),i("li",[t._v("fs.copyFile(src, dest[, flags], callback)")])])]),i("li",[i("strong",[t._v("fs.Stats 类")]),i("ul",[i("li",[t._v("stats.isDirectory()")]),i("li",[t._v("stats.isFile()")])])])]),i("p",[t._v('每一个异步方法对应都有一个同步方法。方法的名字是在后面 + "Sync"。')]),i("p",[i("code",[t._v("fs.writeFile()")]),t._v(" 对应--\x3e>同步方法 "),i("code",[t._v("fs.writeFileSync()")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("stream---流（抽象数据结构）")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[this._v("模块zlib\n"),e("ul",[e("li",[this._v("zlib.createGzip([options]) 压缩")]),e("li",[this._v("zlib.createGunzip([options]) 解压缩")])])])}],!1,null,null,null);e.default=l.exports}}]);