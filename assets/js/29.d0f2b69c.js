(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{281:function(n,e,r){"use strict";r.r(e);var t=r(0),a=Object(t.a)({},(function(){var n=this.$createElement;this._self._c;return this._m(0)}),[function(){var n=this.$createElement,e=this._self._c||n;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"tslint-json配置"}},[this._v("Tslint.json配置")]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('{\n　// 禁止自动检测末尾行必须使用逗号，always总是检测，never从不检测，ignore忽略检测\n　　"trailing-comma": [true, {\n　　　　"singleline": "never",\n　　　　"multiline": {\n　　　　　　"objects": "ignore",\n　　　　　　"arrays": "always",\n　　　　　　"functions": "never",\n　　　　　　"typeLiterals": "ignore"\n　　　　}\n　　}],\n\n  // 禁止给类的构造函数的参数添加修饰符\n  "no-parameter-properties": false,\n  // 禁止使用 debugger\n  "no-debugger": false,\n  // 禁止行尾有空格\n  "no-trailing-whitespace": false,\n  // 禁止无用的表达式\n  "no-unused-expression": true,\n  // 定义过的变量必须使用\n  "no-unused-variable": true,\n  // 变量必须先定义后使用\n  "no-use-before-declare": true,\n  // 禁止使用 var\n  "no-var-keyword": true,\n  // 必须使用 === 或 !==，禁止使用 == 或 !=，与 null 比较时除外\n  "triple-equals": true,\n  // 指定类成员的排序规则\n  "member-ordering": false,\n  // 禁止将 this 赋值给其他变量，除非是解构赋值\n  "no-this-assignment": [\n    false,\n    {\n      "allowed-names": [\n        "^self$",\n        "^that$"\n      ],\n      "allow-destructuring": true\n    }\n  ],\n  // 必须使用箭头函数，除非是单独的函数声明或是命名函数\n  "only-arrow-functions": [\n    true,\n    "allow-declarations",\n    "allow-named-functions"\n  ],\n  // 禁止出现空代码块，允许 catch 是空代码块\n  "no-empty": [\n    true,\n    "allow-empty-catch"\n  ],\n  // 禁止无用的类型断言\n  "no-unnecessary-type-assertion": true,\n  // 使用 return; 而不是 return undefined;\n  "return-undefined": true,\n  // 禁止对 array 使用 for in 循环\n  "no-for-in-array": true,\n  "comment-format": [\n    true,\n    "check-space"\n  ],\n  // 单行注释格式化规则\n  // 定义函数时如果用到了覆写，则必须将覆写的函数写到一起\n  "adjacent-overload-signatures": true,\n  // 禁止对函数的参数重新赋值\n  "no-parameter-reassignment": true,\n  // if 后面必须有 {，除非是单行 if\n  "curly": [\n    true,\n    "ignore-same-line"\n  ],\n  // for in 内部必须有 hasOwnProperty\n  "forin": true,\n  // 禁止在分支条件判断中有赋值操作\n  "no-conditional-assignment": true,\n  // 禁止使用 new 来生成 String, Number 或 Boolean\n  "no-construct": true,\n  // 禁止 super 在一个构造函数中出现两次\n  "no-duplicate-super": true,\n  // 禁止在 switch 语句中出现重复测试表达式的 case\n  "no-duplicate-switch-case": true,\n  // 禁止出现重复的变量定义或函数参数名\n  "no-duplicate-variable": [\n    true,\n    "check-parameters"\n  ],\n  // 禁止使用 eval\n  "no-eval": true,\n  // 禁止对对象字面量进行类型断言（断言成 any 是允许的）\n  "no-object-literal-type-assertion": true,\n  // 禁止没必要的 return await\n  "no-return-await": true,\n  // 禁止在数组中出现连续的逗号，如 let foo = [,,]\n  "no-sparse-arrays": true,\n  // 禁止 throw 字符串，必须 throw 一个 Error 对象\n  "no-string-throw": true,\n  // switch 的 case 必须 return 或 break\n  "no-switch-case-fall-through": true,\n  // 使用实例的方法时，必须 bind 到实例上\n  "no-unbound-method": [\n    true,\n    "ignore-static"\n  ],\n  // 使用 { ...foo, bar: 1 } 代替 Object.assign({}, foo, { bar: 1 })\n  // 前者的类型检查更完善\n  "prefer-object-spread": true,\n  // parseInt 必须传入第二个参数\n  "radix": true,\n  // 必须使用 isNaN(foo) 而不是 foo === NaN\n  "use-isnan": true,\n  //\n  //\n  // 可维护性\n  // 这些规则可以增加代码的可维护性\n  //\n  // 禁止函数的循环复杂度超过 20，https://en.wikipedia.org/wiki/Cyclomatic_complexity\n  "cyclomatic-complexity": [\n    true,\n    20\n  ],\n  // 禁止使用废弃（被标识了 @deprecated）的 API\n  "deprecation": true,\n  // 一个缩进必须用四个空格替代\n  "indent": [\n    true,\n    "spaces",\n    4\n  ],\n  // 禁止出现重复的 import\n  "no-duplicate-imports": true,\n  // 禁止一个文件中出现多个相同的 namespace\n  "no-mergeable-namespace": true,\n  // 文件类型必须时 utf-8\n  "encoding": true,\n  // import 语句中，关键字之间的间距必须是一个空格\n  "import-spacing": true,\n  // 接口可以 implement extend 和 merge\n  "interface-over-type-literal": true,\n  // new 后面只必须有一个空格\n  "new-parens": true,\n  // 类型断言必须使用 as Type，禁止使用 <Type>\n  // <Type> 容易被理解为 jsx\n  "no-angle-bracket-type-assertion": true,\n  // 禁止连续超过三行空行\n  "no-consecutive-blank-lines": [\n    true,\n    3\n  ],\n  // 禁止使用特殊空白符（比如全角空格）\n  "no-irregular-whitespace": true,\n  // 禁止使用 JSDoc，因为 TypeScirpt 已经包含了大部分功能\n  "no-redundant-jsdoc": true,\n  // 禁止使用三斜杠引入类型定义文件\n  "no-reference-import": true,\n  // 禁止变量定义时赋值为 undefined\n  "no-unnecessary-initializer": true,\n  // 小数必须以 0. 开头，禁止以 . 开头，并且不能以 0 结尾\n  "number-literal-format": true,\n  // 必须使用 a = {b} 而不是 a = {b: b}\n  "object-literal-shorthand": true,\n  // 变量申明必须每行一个，for 循环的初始条件中除外\n  "one-variable-per-declaration": [\n    true,\n    "ignore-for-loop"\n  ],\n  // if 后的 { 禁止换行\n  "one-line": true,\n  // 必须使用单引号，jsx 中必须使用双引号\n  "quotemark": [\n    true,\n    "single",\n    "jsx-double",\n    "avoid-template",\n    "avoid-escape"\n  ],\n  // 行尾必须有分号\n  "semicolon": [\n    true,\n    "always",\n    "ignore-interfaces"\n  ],\n  // 函数名前必须有空格\n  "space-before-function-paren": [\n    true,\n    "asyncArrow"\n  ],\n  // 括号内首尾禁止有空格\n  "space-within-parens": [\n    true,\n    0\n  ],\n  // 禁止 finally 内出现 return, continue, break, throw 等\n  // finally 会比 catch 先执行\n  "no-unsafe-finally": true\n}\n')])])])])}],!1,null,null,null);e.default=a.exports}}]);