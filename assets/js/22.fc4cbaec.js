(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{273:function(n,e,t){"use strict";t.r(e);var a=t(0),r=Object(a.a)({},(function(){var n=this.$createElement;this._self._c;return this._m(0)}),[function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"content"},[t("h1",{attrs:{id:"函数实现"}},[n._v("函数实现")]),t("h2",{attrs:{id:"深拷贝-能拷贝-string、number、object、array、boolean-等类型"}},[n._v("深拷贝(能拷贝 String、Number、Object、Array、Boolean 等类型)")]),t("ol",[t("li",[t("p",[n._v("JSON 方法实现")]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('//_tmp和result是相互独立的，没有任何联系，有各自的存储空间。\nfunction deepClone(obj) {\n    let _tmp = JSON.stringify(obj);  //将对象转换为json字符串形式\n    let result = JSON.parse(_tmp);   //将字符串转换为原生js对象\n    return result;\n};\n\nlet obj = {\n    lisi: {\n        age: 18,\n        class: "nice",\n        fn:function(){\n            console.log("aa")\n        }\n    },\n    zhangsan: {\n        age: 21,\n        class: 181201,\n        undefined:undefined\n    }\n};\n\nlet test = deepClone(obj);\nconsole.log(test);\n')])])]),t("p",[n._v("弊端：")]),t("ul",[t("li",[n._v("会忽略 "),t("code",[n._v("undefined")])]),t("li",[n._v("不能序列化函数")]),t("li",[n._v("不能解决循环引用的对象")])])]),t("li",[t("p",[n._v("用 for…in 递归")]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('function deepClone(obj) {\n    let objClone = Array.isArray(obj) ? [] : {};\n    if (obj && typeof obj === "object") {\n        for (key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                //判断ojb子元素是否为对象，如果是，递归复制\n                if (obj[key] && typeof obj[key] === "object") {\n                    objClone[key] = deepClone(obj[key]);\n                } else {\n                    //如果不是，简单复制\n                    objClone[key] = obj[key];\n                }\n            }\n        }\n    }\n    return objClone;\n}\n')])])])]),t("li",[t("p",[t("em",[n._v("$")]),n._v(".extend( [deep ], target, object1 [, objectN ] )")]),t("p",[n._v("deep 表示是否深拷贝，为 true 为深拷贝，为 false，则为浅拷贝")]),t("p",[n._v("target Object 类型 目标对象，其他对象的成员属性将被附加到该对象上。")]),t("p",[n._v("object1 可选。 Object 类型 第一个被合并的对象。")]),t("p",[n._v("objectN 可选。 Object 类型 第 N 个被合并的对象。")]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('let obj = {\n    lisi: {\n        age: 18,\n        class: "nice",\n        fn:function(){\n            console.log("aa")\n        }\n    },\n    zhangsan: {\n        age: 21,\n        class: 181201,\n        undefined:undefined\n    }\n};\nlet clone=$.extend(true,[],obj);\nconsole.log(obj,clone);\n')])])])]),t("li",[t("p",[n._v("----浅拷贝")]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('let obj = {\n    lisi: {\n        age: 18,\n        class: "nice",\n        fn:function(){\n            console.log("aa")\n        }\n    },\n    zhangsan: {\n        age: 21,\n        class: 181201,\n        undefined:undefined\n    }\n};\n\nlet object2 = Object.assign({c: 4, d: 5}, obj);\n')])])])])]),t("h2",{attrs:{id:"url-参数处理"}},[n._v("url 参数处理")]),t("ol",[t("li",[t("p",[n._v("正则表达式")]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('function getParmes(name) {\n    var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)", "i");\n    var r = window.location.search.substr(1).match(reg);\n    if (r != null) return unescape(r[2]);\n    return null;\n}\n')])])])]),t("li",[t("p",[n._v("字符串分割，截取")]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('function getParmes() {\n   var url = location.search; //获取url中"?"符后的字串\n   var theRequest = new Object();\n   if (url.indexOf("?") != -1) {\n      var str = url.substr(1);\n      strs = str.split("&");\n      for(var i = 0; i < strs.length; i ++) {\n         theRequest[strs[i].split("=")[0]]=unescape(strs[i].split("=")[1]);\n      }\n   }\n   return theRequest;\n}\n')])])])])]),t("h2",{attrs:{id:"数组去重"}},[n._v("数组去重")]),t("ol",[t("li",[t("p",[n._v("简单去重")]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("/*\n* 新建一新数组，遍历传入数组，值不在新数组就push进该新数组中\n* IE8以下不支持数组的indexOf方法\n*/\nfunction uniq(array){\n    var temp = []; //一个新的临时数组\n    for(var i = 0; i < array.length; i++){\n        if(temp.indexOf(array[i]) == -1){\n            temp.push(array[i]);\n        }\n    }\n    return temp;\n }\n")])])])]),t("li",[t("p",[n._v("对象键值法去重")]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('/*\n* 速度最快， 占空间最多（空间换时间）。该方法执行的速度比其他任何方法都快， 就是占用的内存大一些。\n* 现思路：新建一js对象以及新数组，遍历传入数组时，判断值是否为js对象的键，不是的话给对象新增该键并放入新数组。\n* 注意点：判断是否为js对象键时，会自动对传入的键执行“toString()”，\n* 不同的键可能会被误认为一样，例如n[val]-- n[1]、n["1"]；\n* 解决上述问题还是得调用“indexOf”。\n*/\nfunction uniq(array){\n    var temp = {}, r = [], len = array.length, val, type;\n    for (var i = 0; i < len; i++) {\n        val = array[i];\n        type = typeof val;\n        if (!temp[val]) {\n            temp[val] = [type];\n            r.push(val);\n        } else if (temp[val].indexOf(type) < 0) {\n            temp[val].push(type);\n            r.push(val);\n        }\n    }\n    return r;\n}\n')])])])]),t("li",[t("p",[n._v("排序后相邻去除法")]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("/*\n* 给传入数组排序，排序后相同值相邻，\n* 然后遍历时,新数组只加入不与前一值重复的值。\n* 会打乱原来数组的顺序\n*/\nfunction uniq(array){\n    array.sort();\n    var temp=[array[0]];\n    for(var i = 1; i < array.length; i++){\n        if( array[i] !== temp[temp.length-1]){\n            temp.push(array[i]);\n        }\n    }\n    return temp;\n}\n")])])])]),t("li",[t("p",[n._v("数组下标法")]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("/*\n* 还是得调用“indexOf”性能跟方法1差不多，\n* 实现思路：如果当前数组的第i项在当前数组中第一次出现的位置不是i，\n* 那么表示第i项是重复的，忽略掉。否则存入结果数组。\n*/\nfunction uniq(array){\n    var temp = [];\n    for(var i = 0; i < array.length; i++) {\n        //如果当前数组的第i项在当前数组中第一次出现的位置是i，才存入数组；否则代表是重复的\n        if(array.indexOf(array[i]) == i){\n            temp.push(array[i])\n        }\n    }\n    return temp;\n}\n\n")])])])]),t("li",[t("p",[n._v("优化遍历数组法--------推荐的方法")]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("/*\n* 实现思路：获取没重复的最右一值放入新数组。\n* （检测到有重复值时终止当前循环同时进入顶层循环的下一轮判断）\n*/\nfunction uniq(array){\n    var temp = [];\n    var index = [];\n    var l = array.length;\n    for(var i = 0; i < l; i++) {\n        for(var j = i + 1; j < l; j++){\n            if (array[i] === array[j]){\n                i++;\n                j = i;\n            }\n        }\n        temp.push(array[i]);\n        index.push(i);\n    }\n    console.log(index);\n    return temp;\n}\n")])])])]),t("li",[t("p",[n._v("利用 ES6 的 set 方法。")]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("/*\n* Set数据结构，它类似于数组，其成员的值都是唯一的\n*/\nfunction uniq(arr){\n     return Array.from(new Set(arr)); // 利用Array.from将Set结构转换成数组\n     /*return [...new Set(arr)]*/\n}\n")])])])])]),t("h2",{attrs:{id:"实现一个-new-操作符"}},[n._v("实现一个 new 操作符")]),t("ul",[t("li",[t("p",[t("strong",[n._v("new 操作符做了这些事：")])]),t("ul",[t("li",[n._v("创建了一个全新的对象。")]),t("li",[n._v("执行[[Prototype]]（ 也就是 "),t("strong",[n._v("proto")]),n._v("） 链接。")]),t("li",[n._v("this 指向新创建的对象。")]),t("li",[n._v("通过 new 创建的每个对象将最终被[[Prototype]] 链接到这个函数的 prototype 对象上。")]),t("li",[n._v("如果函数没有返回对象类型 Object(包含 Functoin, Array, Date, RegExg, Error)， 那么 new 表达式中的函数调用将返回该对象引用。")])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('function New(func) {\n    var res = {};\n    if (func.prototype !== null) {\n        res.__proto__ = func.prototype;\n    }\n    var ret = func.apply(res, Array.prototype.slice.call(arguments, 1));\n    if ((typeof ret === "object" || typeof ret === "function") && ret !== null) {\n        return ret;\n    }\n    return res;\n}\n')])])])])]),t("h2",{attrs:{id:"实现一个-json-stringify"}},[n._v("实现一个 JSON.stringify")]),t("ul",[t("li",[t("strong",[n._v("JSON.stringify(value[,replacer[,space]])：")]),t("ul",[t("li",[n._v("Boolean|Number|String 类型会自动转换成对应的原始值。")]),t("li",[n._v("undefined、任意函数以及 symbol，会被忽略（出现在非数组对象的属性值中时），或者被转换成 null（出现在数组中时）。")]),t("li",[n._v("不可枚举的属性会被忽略")]),t("li",[n._v("如果一个对象的属性值通过某种间接的方式指回该对象本身，即循环引用，属性也会被忽略。")])])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('function jsonStringify(obj) {\n    let type = typeof obj;\n    if (type !== "object" || type === null) {\n        if (/string|undefined|function/.test(type)) {\n            obj = \'"\' + obj + \'"\';\n        }\n        return String(obj);\n    } else {\n        let json = [],\n            arr = (obj && obj.constructor === Array);\n        for (let k in obj) {\n            let v = obj[k];\n            let type = typeof v;\n            if (/string|undefined|function/.test(type)) {\n                v = \'"\' + v + \'"\';\n            } else if (type === "object") {\n                v = jsonStringify(v);\n            }\n            json.push((arr ? "" : \'"\' + k + \'":\') + String(v));\n        }\n        return (arr ? "[" : "{") + String(json) + (arr ? "]" : "}")\n    }\n}\n')])])]),t("h2",{attrs:{id:"实现一个-json-parse"}},[n._v("实现一个 JSON.parse")]),t("p",[t("strong",[n._v("JSON.parse(text[,reviver])")])]),t("ul",[t("li",[t("p",[t("strong",[n._v("直接调用 eval (行 JS 代码，有 XSS 漏洞。)")])]),t("ul",[t("li",[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function jsonParse(opt) {\n    return eval('(' + opt + ')');\n}\n")])])])]),t("li",[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('//参数json做校验\nfunction jsonParse(json) {\n    var rx_one = /^[\\],:{}\\s]*$/;\n    var rx_two = /\\\\(?:["\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g;\n    var rx_three = /"[^"\\\\\\n\\r]*"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g;\n    var rx_four = /(?:^|:|,)(?:\\s*\\[)+/g;\n    if (rx_one.test(json.replace(rx_two, "@").replace(rx_three, "]").replace(rx_four, ""))) {\n        return eval("(" + json + ")");\n    }\n}\n')])])])])])]),t("li",[t("p",[t("strong",[n._v("Function (Function 与 eval 有相同的字符串参数特性。)")])]),t("ul",[t("li",[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("(new Function('return ' + jsonStr))();\n")])])])])])])]),t("h2",{attrs:{id:"实现一个-call-apply-bind"}},[n._v("实现一个 call / apply / bind")]),t("p",[t("strong",[n._v("call 语法：")])]),t("blockquote",[t("p",[n._v("function.apply(thisArg,[argsArray])，调用一个函数，以及作为一个数组（或类似数组对象）提供的参数。")])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("Function.prototype.call = function (context) {\n    context = context ? Object(context) : window;\n    context.fn = this;\n    \n    var args = [];\n    for (var i = 1, len = arguments.length; i < len; i++) {\n        args.push('arguments[' + i + ']');\n    }\n    var result = eval('context.fn(' + args + ')');\n    \n    delete context.fn\n    return result;\n}\n---\x3e>>\nvar foo = {\n    value: 'foo'\n}\nfunction bar(name, age) {\n    console.log(name)\n    console.log(age)\n    console.log(this.value);\n}\nbar.call(foo, 'Alex', '3')\n")])])]),t("p",[t("strong",[n._v("apply 语法：")])]),t("blockquote",[t("p",[n._v("function.apply(thisArg,[argsArray])，调用一个函数，以及作为一个数组（或类似数组对象）提供的参数。")])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("Function.prototype.apply = function (context, arr) {\n    context = context ? Object(context) : window;\n    context.fn = this;\n\n    let result;\n    if (!arr) {\n        result = context.fn();\n    } else {\n        result = context.fn(...arr);\n    }\n\n    delete context.fn\n    return result;\n}\n---\x3e>>\nvar foo = {\n    value: 'foo',\n    aa: 'aa'\n}\n\nfunction bar(name, age) {\n    console.log(name, 'name')\n    console.log(age, 'age')\n    console.log(this.value, 'value');\n}\nbar.apply(foo, ['Alex', '3'])\n")])])]),t("p",[t("strong",[t("code",[n._v("bind()")]),n._v("方法:")])]),t("blockquote",[t("p",[n._v("创建一个新函数。当这个新函数被调用时，bind() 的第一个参数将作为它运行时的 this，之后的参数将会在传递的实参前传入作为它的参数。bind()返回的是一个函数，需要执行")])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("Function.prototype.bind = function (context) {\n    if (typeof this !== \"function\") {\n        throw new Error(\"not a function\");\n    }\n\n    var self = this;\n    var args = Array.prototype.slice.call(arguments, 1);\n\n    var Tmp = function () {};\n    var bind = function () {\n        var bindArgs = Array.prototype.slice.call(arguments);\n        return self.apply(this instanceof Tmp ? this : context, args.concat(bindArgs));\n    }\n\n    Tmp.prototype = this.prototype;\n    bind.prototype = new Tmp();\n    return bind;\n}\n\nvar foo = {\n    value: 'foo',\n    aa: 'aa'\n}\n\nfunction bar(name, age) {\n    console.log(name, 'name')\n    console.log(age, 'age')\n    console.log(this.value, 'value');\n}\nlet bind = bar.bind(foo, 'Alex', '3')\n\nbind();\n")])])]),t("p",[n._v("Now, let's try it 👉")])])}],!1,null,null,null);e.default=r.exports}}]);