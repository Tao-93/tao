(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{329:function(n,e,t){"use strict";t.r(e);var s=t(0),l=Object(s.a)({},(function(){var n=this.$createElement;this._self._c;return this._m(0)}),[function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"content"},[t("h1",{attrs:{id:"webpack"}},[n._v("webpack")]),t("h2",{attrs:{id:"webpack-核心概念"}},[n._v("webpack 核心概念")]),t("ul",[t("li",[t("p",[n._v("entry")]),t("p",[n._v("入口起点(entry point)指示 webpack 应该使用哪个模块,来作为构建其内部依赖图的开始。")]),t("p",[n._v("进入入口起点后,webpack 会找出有哪些模块和库是入口起点（直接和间接）依赖的。")]),t("p",[n._v("每个依赖项随即被处理,最后输出到称之为 bundles 的文件中。")])]),t("li",[t("p",[n._v("output")]),t("p",[n._v("output 属性告诉 webpack 在哪里输出它所创建的 bundles,以及如何命名这些文件,默认值为 ./dist。")]),t("p",[n._v("基本上,整个应用程序结构,都会被编译到你指定的输出路径的文件夹中。")])]),t("li",[t("p",[n._v("module")]),t("p",[n._v("模块,在 Webpack 里一切皆模块,一个模块对应着一个文件。Webpack 会从配置的 Entry 开始递归找出所有依赖的模块。")])]),t("li",[t("p",[n._v("chunk")]),t("p",[n._v("代码块,一个 Chunk 由多个模块组合而成,用于代码合并与分割。")])]),t("li",[t("p",[n._v("loader")]),t("p",[n._v("loader 让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）。")]),t("p",[n._v("loader 可以将所有类型的文件转换为 webpack 能够处理的有效模块,然后你就可以利用 webpack 的打包能力,对它们进行处理。")]),t("p",[n._v("本质上,webpack loader 将所有类型的文件,转换为应用程序的依赖图（和最终的 bundle）可以直接引用的模块。")])])]),t("h2",{attrs:{id:"webpack-构建流程"}},[n._v("webpack 构建流程")]),t("ol",[t("li",[n._v("初始化参数：从配置文件和 Shell 语句中读取与合并参数,得出最终的参数。")]),t("li",[n._v("开始编译：用上一步得到的参数初始化 Compiler 对象,加载所有配置的插件,执行对象的 run 方法开始执行编译。")]),t("li",[n._v("确定入口：根据配置中的 entry 找出所有的入口文件。")]),t("li",[n._v("编译模块：从入口文件出发,调用所有配置的 Loader 对模块进行翻译,再找出该模块依赖的模块,再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理。")]),t("li",[n._v("完成模块编译：在经过第 4 步使用 Loader 翻译完所有模块后,得到了每个模块被翻译后的最终内容以及它们之间的依赖关系。")]),t("li",[n._v("输出资源：根据入口和模块之间的依赖关系,组装成一个个包含多个模块的 Chunk,再把每个 Chunk 转换成一个单独的文件加入到输出列表,这步是可以修改输出内容的最后机会。")]),t("li",[n._v("输出完成：在确定好输出内容后,根据配置确定输出的路径和文件名,把文件内容写入到文件系统。")])]),t("p",[n._v("在以上过程中,Webpack 会在特定的时间点广播出特定的事件,插件在监听到感兴趣的事件后会执行特定的逻辑,并且插件可以调用 Webpack 提供的 API 改变 Webpack 的运行结果。")]),t("h2",{attrs:{id:"webpack4-0"}},[n._v("webpack4.0")]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("const path = require('path');\nconst glob = require('glob');\nconst webpack = require('webpack');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst ExtractTextWebpackPlugin = require('extract-text-webpack-plugin');\nconst CleanWebpackPlugin = require('clean-webpack-plugin');\nconst PurifyCSSPlugin = require('purifycss-webpack'); // 去除无用的css\nconst optimizeCss = require('optimize-css-assets-webpack-plugin'); //CSS压缩\nconst WebpackParallelUglifyPlugin = require('webpack-parallel-uglify-plugin'); //js优化\nconst UglifyJsPlugin = require('uglifyjs-webpack-plugin');\n\n\nmodule.exports = {\n    entry: {\n        index: './src/js/index.js',\n        login: './src/js/login.js'\n    },\n    output: {\n        filename: 'js/[name].[hash:4].js',\n        path: path.resolve('dist')\n    },\n    performance: {\n        // hints: false\n        hints: \"warning\", // 枚举\n        maxAssetSize: 30000000, // 整数类型（以字节为单位）\n        maxEntrypointSize: 50000000, // 整数类型（以字节为单位）\n        assetFilter: function(assetFilename) {\n            // 提供资源文件名的断言函数\n            return assetFilename.endsWith('.css') || assetFilename.endsWith('.js');\n        }\n    },\n    module: {\n        rules: [{\n            test: /\\.css$/,\n            use: ExtractTextWebpackPlugin.extract({\n                use: [{\n                    loader: 'css-loader',\n                }, {\n                    loader: 'postcss-loader',\n                }],\n                publicPath: '../'\n            }),\n            include: path.resolve(__dirname, 'src'),\n            exclude: /node_modules/\n        }, {\n            test: /\\.scss/,\n            use: ExtractTextWebpackPlugin.extract({\n                use: [{\n                    loader: 'css-loader'\n                }, {\n                    loader: 'sass-loader'\n                }, {\n                    loader: 'postcss-loader'\n                }],\n                fallback: 'style-loader',\n                publicPath: '../'\n            }),\n            include: path.resolve(__dirname, 'src'),\n            exclude: /node_modules/\n        }, {\n            test: /\\.(jpe?g|png|gif)$/,\n            use: [{\n                loader: 'url-loader',\n                options: {\n                    limit: 5 * 1024,\n                    outputPath: 'images/'\n                }\n            }]\n        }, {\n            test: /\\.(htm|html)$/,\n            use: 'html-withimg-loader'\n        }, {\n            test: /\\.(eot|ttf|woff|svg)$/,\n            use: [{\n                loader: 'file-loader',\n                options: {\n                    outputPath: 'fonts/'\n                }\n            }]\n        }, {\n            test: /\\.js?$/,\n            exclude: /(node_modules)/,\n            loader: 'babel-loader'\n        }]\n    },\n    optimization: {\n        minimize: true, //取代 new UglifyJsPlugin(/* ... */)\n        providedExports: true,\n        usedExports: true,\n        //识别package.json中的sideEffects以剔除无用的模块，用来做tree-shake\n        //依赖于optimization.providedExports和optimization.usedExports\n        sideEffects: true,\n        //取代 new webpack.optimize.ModuleConcatenationPlugin()\n        concatenateModules: true,\n        //取代 new webpack.NoEmitOnErrorsPlugin()，编译错误时不打印输出资源。\n        noEmitOnErrors: true,\n        splitChunks: {\n            chunks: 'async',\n            minSize: 30000,\n            minChunks: 1,\n            maxAsyncRequests: 5,\n            maxInitialRequests: 3,\n            automaticNameDelimiter: '~',\n            name: true,\n            cacheGroups: {\n                vendor: {\n                    name: \"vendor\",\n                    chunks: \"initial\",\n                    minChunks: 2\n                }\n            }\n        }\n    },\n    plugins: [\n        // new HtmlWebpackPlugin({\n        //     title: 'template',\n        //     template: './src/index.html',\n        //     filename: 'index.html',\n        //     chunks: ['vendor', 'index'],\n        //     hash: true\n        // }),\n        // new HtmlWebpackPlugin({\n        //     title: 'Custom template',\n        //     template: './src/login.html',\n        //     filename: 'login.html',\n        //     chunks: ['vendor', 'login'],\n        //     hash: true\n        // }),\n        new optimizeCss({\n            cssProcessor: require('cssnano'), //引入cssnano配置压缩选项\n            cssProcessorOptions: {\n                discardComments: { removeAll: true }\n            },\n            canPrint: true //是否将插件信息打印到控制台\n        }),\n        new webpack.HotModuleReplacementPlugin(),\n        new ExtractTextWebpackPlugin('css/style.css'),\n        new CleanWebpackPlugin('dist'),\n        new PurifyCSSPlugin({\n            paths: glob.sync(path.join(__dirname, 'src/*.html'))\n        }),\n         new WebpackParallelUglifyPlugin({\n             uglifyJS: {\n                output: {\n                    beautify: false, //不需要格式化\n                   comments: false //不保留注释\n                },\n                 compress: {\n                    warnings: false, // 在UglifyJs删除没有用到的代码时不输出警告\n                     drop_console: true, // 删除所有的 `console` 语句，可以兼容ie浏览器\n                     collapse_vars: true, // 内嵌定义了但是只用到一次的变量\n                     reduce_vars: true // 提取出出现多次但是没有定义成变量去引用的静态值\n                 }\n             }\n        })\n    ],\n    resolve: {\n        alias: {\n            'jquery$': path.resolve(__dirname, 'src/js/jquery.js'),\n            '_$': path.resolve(__dirname, 'src/js/lodash.min.js')\n        },\n        extensions: ['.js', '.json', '.css']\n    },\n    devServer: {\n        contentBase: './dist',\n        host: 'localhost',\n        port: 8866,\n        // open: true,\n        hot: true,\n        compress: true\n    }\n    // mode: 'development' //development--production\n};\n//配置页面\nconst getHtmlConfig = function(name, title, chunks) {\n    return {\n        template: __dirname + \"/src/\" + name + \".html\",\n        filename: name + \".html\",\n        // favicon: './favicon.ico',\n        title: title,\n        hash: true, //开启hash  ?[hash]\n        chunks: chunks, //页面要引入的包\n        minify: process.env.NODE_ENV === \"development\" ? false : {\n            removeComments: true, //移除HTML中的注释\n            // collapseWhitespace: true, //折叠空白区域 也就是压缩代码\n            // removeAttributeQuotes: true, //去除属性引用\n        },\n    };\n};\nconst htmlArray = [{\n        _html: 'index',\n        _title: '首页',\n        _chunks: ['vendor', 'index']\n    },\n    {\n        _html: 'login',\n        _title: '登录',\n        _chunks: ['vendor', 'login']\n    },\n];\nhtmlArray.forEach((element) => {\n    module.exports.plugins.push(new HtmlWebpackPlugin(getHtmlConfig(element._html, element._title, element._chunks)));\n});\n")])])]),t("p",[n._v("Now, let's try it 👉")])])}],!1,null,null,null);e.default=l.exports}}]);