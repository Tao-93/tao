(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{305:function(e,t,n){"use strict";n.r(t);var o=n(0),a=Object(o.a)({},(function(){var e=this.$createElement;this._self._c;return this._m(0)}),[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"typeof-instanceof"}},[e._v("typeof  && instanceof")]),n("h3",{attrs:{id:"typeof"}},[e._v("typeof")]),n("p",[e._v("typeof 是一个一元运算，放在一个运算数之前，运算数可以是任意类型。")]),n("p",[e._v("**它返回值是一个字符串，该字符串说明运算数的类型。（**typeof 运算符返回一个用来表示表达式的数据类型的字符串。 ）")]),n("p",[e._v("typeof其实就是判断参数是什么类型的实例，就一个参数")]),n("p",[e._v("typeof 一般只能返回如下几个结果："),n("strong",[e._v('"number"、"string"、"boolean"、"object"、"function" 、 "undefined"、"Symbol "。')])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('var a="oo";\nvar b=true;\nvar c="";\nvar d=null;\nvar e=10;\nvar symbol = Symbol("alex");\nalert(typeof(o));//undefined\nalert(typeof(a)); //string\nalert(typeof(b)); //boolean\nalert(typeof(c));//string\nalert(typeof(e)); //number\nalert(typeof Symbol()) //symbol\nalert(typeof symbol) // symbol\n\nalert(d==null); //true\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('var obj1=new Object();\nvar obj2=new Array();\nvar obj3=new Date();\nvar obj4=new Function();\nvar obj5=new Boolean(); \nvar obj6=new Number();\nvar obj7=new String(); \nalert("obj1  "+typeof(obj1)); //object\nalert("obj2  "+typeof(obj2)); //object\nalert("obj3  "+typeof(obj3));//object\nalert("obj4  "+typeof(obj4));//function\nalert("obj5  "+typeof(obj5));//object\nalert("obj6  "+typeof(obj6));//object\nalert("obj7  "+typeof(obj7));//object\n\nalert(obj4 instanceof Function);//true\nalert(obj4 instanceof Object);//true\n')])])]),n("h3",{attrs:{id:"instanceof"}},[e._v("instanceof")]),n("p",[e._v("instanceof来检测某个对象是不是另一个对象的实例。")]),n("p",[e._v("instanceof 运算符用来测试一个对象在其原型链中是否存在一个构造函数的 prototype 属性。")]),n("p",[e._v("语法：object  instanceof  constructor")]),n("p",[e._v("参数：object （要检测的对象.） constructor（某个构造函数）")]),n("p",[e._v("描述：instanceof 运算符用来检测 constructor.prototype 是否存在于参数 object 的原型链上")]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('function getDataType(obj) {\n    if(obj === null){\n    \treturn "null";\n    }else if(typeof obj === "object"){\n    \tif(obj instanceof Array){\n    \t\treturn "array";\n   \t\t}else{\n    \t\treturn "object";\n   \t\t}\n    }else{\n    \treturn typeof obj;\n    }\n}\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('console.log(getDataType(111)); //number\nconsole.log(getDataType("fasd"));//string\nconsole.log(getDataType(true));//boolean\nconsole.log(getDataType(function () { }));//function\nconsole.log(getDataType([]));//array\nconsole.log(getDataType({}));//object\nconsole.log(getDataType(null));//null\nconsole.log(getDataType(undefined));//undefined\nconsole.log(getDataType(/\\n/));//object\nvar a;\nconsole.log(getDataType(a));//undefined 如果传入没有声明的变量会直接报错\n')])])]),n("p",[e._v("Now, let's try it 👉")])])}],!1,null,null,null);t.default=a.exports}}]);