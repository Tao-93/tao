(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{285:function(e,t,n){"use strict";n.r(t);var o=n(0),r=Object(o.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"vue-property-decorator"}},[e._v("vue-property-decorator")]),n("p",[e._v("这个组件完全依赖于官方维护的 "),n("a",{attrs:{href:"https://github.com/vuejs/vue-class-component",target:"_blank",rel:"noopener noreferrer"}},[e._v("vue-class-component"),n("OutboundLink")],1),e._v(" 装饰器.它具备以下几个属性:")]),e._m(0),n("h2",{attrs:{id:"component"}},[e._v("@Component")]),n("h3",{attrs:{id:"component-options-componentoptions"}},[e._v("@Component(options:ComponentOptions = {})")]),e._m(1),e._m(2),e._m(3),n("h2",{attrs:{id:"prop"}},[e._v("@Prop")]),e._m(4),e._m(5),e._m(6),e._m(7),n("h2",{attrs:{id:"propsync"}},[e._v("@PropSync")]),e._m(8),e._m(9),e._m(10),e._m(11),e._m(12),n("h2",{attrs:{id:"watch"}},[e._v("@Watch")]),n("h3",{attrs:{id:"watch-path-string-options-watchoptions"}},[e._v("@Watch(path: string, options: WatchOptions = {})")]),e._m(13),e._m(14),e._m(15),n("h2",{attrs:{id:"model"}},[e._v("@Model")]),n("h3",{attrs:{id:"model-event-string-options-propoptions-constructor-constructor"}},[e._v("@Model(event?: string, options: (PropOptions | Constructor[] | Constructor) = {})")]),e._m(16),e._m(17),e._m(18),n("h2",{attrs:{id:"emit"}},[e._v("@Emit")]),n("h3",{attrs:{id:"emit-event-string"}},[e._v("@Emit(event?: string)")]),e._m(19),e._m(20),n("h2",{attrs:{id:"provide-inject"}},[e._v("@Provide/@Inject")]),n("h3",{attrs:{id:"provide-inject-providereactive-injectreactive"}},[e._v("@Provide/@Inject  @ProvideReactive/@InjectReactive")]),e._m(21),e._m(22),e._m(23),e._m(24),e._m(25),n("h2",{attrs:{id:"ref"}},[e._v("@Ref")]),n("h3",{attrs:{id:"ref-refkey-string"}},[e._v("@Ref(refKey?: string)")]),e._m(26),e._m(27)])}),[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[e._v("@Component (完全继承于"),n("code",[e._v("vue-class-component")]),e._v(")")]),n("li",[e._v("@Prop")]),n("li",[e._v("@PropSync")]),n("li",[e._v("@Watch")]),n("li",[e._v("@Model")]),n("li",[e._v("@Emit")]),n("li",[e._v("@Inject")]),n("li",[e._v("@Provice")]),n("li",[e._v("@ref")]),n("li",[e._v("Mixins  (在"),n("code",[e._v("vue-class-component")]),e._v("中定义);")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("@Component")]),this._v(" 装饰器可以接收一个对象作为参数，可以在对象中声明 "),t("code",[this._v("components ，filters，directives")]),this._v("等未提供装饰器的选项，也可以声明"),t("code",[this._v("computed，watch")]),this._v("等")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('  <template>\n    <div>\n      <p>{{dataInit}}</p>\n      <p>{{syncUserDetail}}</p>\n    </div>\n  </template>\n   ---------------------------\n // 声明 data\n  public dataInit: string = "dataInit"\n  \n  // 属性计算（Vue中的计算属性,只需将该计算属性名定义为一个函数,并在函数前加上get关键字.）\n  get syncUserDetail() {\n    return this.$store.getters[GET_USER_DETAIL]\n  }\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("<script lang=\"ts\">\nimport router from '@/router'\nimport { Component, Prop, Emit, Vue } from 'vue-property-decorator'\n\nComponent.registerHooks([\n    'beforeRouteLeave',\n    'beforeRouteEnter',\n    'beforeRouteUpdate'\n]);\nconst ComponentOption = {\n    created(){\n        console.log('ComponentOption install');\n    }\n}\n/**option 可以对组件进行加强处理 Mixins */\n@Component({...ComponentOption})\nexport default class Login extends Vue {\n    beforeRouteLeave(to: any, from: any, next: any) {\n        next();\n    }\n\n    beforeRouteEnter(to: any, from: any, next: any) {\n        next();\n    } \n}\n<\/script>\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"prop-options-propoptions-constructor-constructor"}},[t("strong",[this._v("@Prop(options: (PropOptions | Constructor[] | Constructor) = {})")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("@Prop")]),this._v("装饰器接收一个参数，这个参数可以有三种写法：")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[n("code",[e._v("Constructor")]),e._v("，例如"),n("code",[e._v("String，Number，Boolean")]),e._v("等，指定 "),n("code",[e._v("prop")]),e._v(" 的类型；")]),n("li",[n("code",[e._v("Constructor[]")]),e._v("，指定 "),n("code",[e._v("prop")]),e._v(" 的可选类型；")]),n("li",[n("code",[e._v("PropOptions")]),e._v("，可以使用以下选项："),n("code",[e._v("type，default，required，validator")]),e._v("。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("  @Prop(Number) name!: number;\n  @Prop({default: 'default value'}) age!: string;\n  @Prop([String, Boolean]) code!: string | boolean;\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"propsync-propname-string-options-propoptions-constructor-constructor"}},[t("strong",[this._v("@PropSync(propName: string, options: (PropOptions | Constructor[] | Constructor) = {})")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("@PropSync")]),this._v("装饰器与"),t("code",[this._v("@prop")]),this._v("用法类似，二者的区别在于：")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[n("code",[e._v("@PropSync")]),e._v(" 装饰器接收两个参数：\n"),n("code",[e._v("propName: string")]),e._v(" 表示父组件传递过来的属性名；\n"),n("code",[e._v("options: Constructor | Constructor[] | PropOptions")]),e._v(" 与"),n("code",[e._v("@Prop")]),e._v("的第一个参数一致；")]),n("li",[n("code",[e._v("@PropSync")]),e._v(" 会生成一个新的计算属性。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("strong",[this._v("注意,使用PropSync的时候是要在父组件配合.sync使用的")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("export default class HelloWorld extends Vue {\n    @PropSync('syncName', { type: String , default: 'syncName'}) syncedSyncName!: string; \n    // synced 用来实现组件的双向绑定,子组件可以更改父组件传过来的值\n    synceNameEdit():void {        \n        this.syncName = 'syncName change ~'  // 双向绑定,更改父组件的 syncName\n    }\n}\n====>>>>>>>>>>\n    props:{\n        syncName : {\n            type: Strign,\n            default: 'syncName'\n        }\n    },\n    computed:{\n        syncedSyncName: {\n            get(){\n                return this.syncName\n            },\n            set(){\n                this.$emit('update:syncName', vaule)\n            }\n        }\n    }\n\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("@Watch")]),this._v(" 装饰器接收两个参数：")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[n("p",[n("code",[e._v("path: string")]),e._v(" 被侦听的属性名；")])]),n("li",[n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("options?: WatchOptions={} options\n")])])]),n("p",[e._v("可以包含两个属性 ：")]),n("p",[n("code",[e._v("immediate?:boolean")]),e._v(" 侦听开始之后是否立即调用该回调函数；\n"),n("code",[e._v("deep?:boolean")]),e._v(" 被侦听的对象的属性被改变时，是否调用该回调函数；")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("    @Watch('syncName', { immediate: true , deep: true })\n    onSyncNameChanged(newValue:string,oldValue:string){\n        console.log(newValue, 'newValue');\n        console.log(oldValue, 'oldValue');\n    }\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("@Model")]),this._v("装饰器允许我们在一个组件上自定义"),t("code",[this._v("v-model")]),this._v("，接收两个参数：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[t("code",[this._v("event: string")]),this._v(" 事件名。")]),t("li",[t("code",[this._v("options: Constructor | Constructor[] | PropOptions")]),this._v(" 与"),t("code",[this._v("@Prop")]),this._v("的第一个参数一致。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('父组件 => <HelloWorld v-model="vuemodel" syncName="Welcome to Your Vue.js App ." />\n     data(){\n        return{\n            vuemodel: \'vuemodel\'\n        }\n    },\n字组件 => <input type="text" :value="checked" @input="handleInput($event)" />\n\t @Model(\'change\', { type: String, default: \'defaultModel\' }) readonly checked!: string\n   public handleInput(that: any): void {\n     this.$emit(\'change\', that.target.value); \n   }\n')])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[n("code",[e._v("@Emit")]),e._v(" 装饰器接收一个可选参数，该参数是"),n("code",[e._v("$Emit")]),e._v("的第一个参数，充当事件名。如果没有提供这个参数，"),n("code",[e._v("$Emit")]),e._v("会将回调函数名的"),n("code",[e._v("camelCase")]),e._v("转为"),n("code",[e._v("kebab-case")]),e._v("，并将其作为事件名；")]),n("li",[n("code",[e._v("@Emit")]),e._v("会将回调函数的返回值作为第二个参数，如果返回值是一个"),n("code",[e._v("Promise")]),e._v("对象，"),n("code",[e._v("$emit")]),e._v("会在"),n("code",[e._v("Promise")]),e._v("对象被标记为"),n("code",[e._v("resolved")]),e._v("之后触发；")]),n("li",[n("code",[e._v("@Emit")]),e._v("的回调函数的参数，会放在其返回值之后，一起被"),n("code",[e._v("$emit")]),e._v("当做参数使用。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('父组件 => <HelloWorld v-model="vuemodel" syncName="Welcome to Your Vue.js App ." @get-person="getPerson"/>\n    methods:{\n        getPerson(data){\n            console.log(\'来自子组件的data\', data);\n        }\n    }\n字组件 => <button @click="getPerson">emitParent - getPerson</button>\n         <button @click="emitParent">emitParent - emitParent</button>\n      // 相当于 this.emit(\'get-person\',this.person)\n      // 无参数， 如果此处不设置别名字,则默认使用下面的函数命名\n      // 此处命名如果有大写字母则需要用横线隔开\n      // 如果没有return,则返回event\n      \n    @Emit()\n    getPerson(event:MouseEvent){\n        return this.person\n    }\n\n    @Emit(\'get-person\')\n    emitParent(event:MouseEvent){\n        return this.person\n    }\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"provide-key-string-symbol-inject-options-from-injectkey-default-any-injectkey-decorator"}},[t("code",[this._v("@Provide(key?: string | symbol)")]),this._v(" / "),t("code",[this._v("@Inject(options?: { from?: InjectKey, default?: any } | InjectKey)")]),this._v(" decorator")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"providereactive-key-string-symbol-injectreactive-options-from-injectkey-default-any-injectkey-decorator"}},[t("code",[this._v("@ProvideReactive(key?: string | symbol)")]),this._v(" / "),t("code",[this._v("@InjectReactive(options?: { from?: InjectKey, default?: any } | InjectKey)")]),this._v(" decorator")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("提供/注入装饰器,\nkey可以为string或者"),t("code",[this._v("symbol类型,")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("相同点:Provide/ProvideReactive提供的数据,在内部组件使用Inject/InjectReactive都可取到不同点:")]),this._v("\n如果提供("),t("code",[this._v("ProvideReactive")]),this._v(")的值被父组件修改，则子组件可以使用"),t("code",[this._v("InjectReactive")]),this._v("捕获此修改")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("父组件 => export default class App extends Vue{\n            @Provide() provideValue = 'provideValue';\n            @ProvideReactive() ProvideReactiveValue = 'ProvideReactiveValue';\n            @ProvideReactive('key') ProvideReactiveValueKey = 'ProvideReactiveValueKey';\n        }\n 字组件 =>  <p>\n              祖先组件里面的provideValue:{{provideValue}}<br/>\n              祖先组件里面的ProvideReactiveValue:{{ProvideReactiveValue}}<br/>\n              祖先组件里面的ProvideReactiveValueKey:{{ProvideReactiveValueKey}}\n          </p>\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("@Ref")]),this._v(" 装饰器接收一个可选参数，用来指向元素或子组件的引用信息。如果没有提供这个参数，会使用装饰器后面的属性名充当参数")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('    <div>\n        <button @click="getRef()" ref="buttonRef">获取ref</button>\n    </div>\n    \x3c!-- 过配置路由的 meta 对象的 keepAlive 属性值来区分页面是否需要缓存 --\x3e\n    <router-view v-if="!$route.meta.keepAlive" ref="RefComponent"></router-view>\n    <keep-alive>\n      <router-view v-if="$route.meta.keepAlive" ref="RefComponent"></router-view>\n    </keep-alive>\n    \n    \n    @Ref(\'buttonRef\') readonly ref!: HTMLButtonElement;\n    @Ref(\'RefComponent\') readonly RefComp!: RefComponent;\n\n    getRef(){\n        console.log(this.ref);\n        console.log(this.RefComp);\n    }\n')])])])}],!1,null,null,null);t.default=r.exports}}]);